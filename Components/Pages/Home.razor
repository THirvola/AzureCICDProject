@using CliWrap
@using System.Text.Json
@page "/"
@rendermode InteractiveServer

<PageTitle>CI/CD demonstration</PageTitle>

<h1>CI/CD demonstration</h1>

This is a simple app and a practice project to demonstrate continuous integration/deployment (CI/CD) on an azure server.
<br />

<br/>
Pressing the button below will have the following effect:
<br />
1. Randomize a new number between 1 and 1000
<br />
2. Change the value of the number in a local copy of the source code itself
<br />
3. Commit changes to the page and push that to https://github.com/THirvola/AzureCICDProject
<br />
4. Github will start a workflow for automatic build and deployment of the app
<br />
5. After about two minutes, the deployment is done and the page will prompt you to refresh
<br />
<br />
There is a 5-minute cooldown on the button.
<br />

<h2>Current number: @currentNumber</h2>
<img src="https://github.com/THirvola/AzureCICDProject/actions/workflows/azure-webapps-dotnet-core.yml/badge.svg" />
<br />
<i>@workflowLog</i>
<br />
<br />

<button class="btn btn-primary" @onclick="ChangeNumber">Generate!</button>
<br />
<br />
<p>Server log: <br/>@serverLog</p>

@code {
    //The const number that can only be changed by changing the source itself
    private const int currentNumber = 257;

    //Private log variables. String for storing and MarkupString for display
    private MarkupString workflowLog = (MarkupString)"";
    private string workflowLogString = "";
    private DateTime previousGeneration = DateTime.MinValue;
    private string serverLogString = "";
    private MarkupString serverLog = (MarkupString)"";
    private string previousStatus = "completed";

    //Options for parsing the Github REST API Json
    private readonly JsonSerializerOptions jsonOpts = new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        };

    /// <summary>
    /// Ran automatically on initialization. Only used to update the workflow log
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await UpdateWorkflowLog();
    }

    /// <summary>
    /// Logs the given line of text.
    /// </summary>
    /// <param name="line">The text to write in the log</param>
    /// <param name="server">True if writing to server log, false if writing to workflow log</param>
    /// <param name="clear">If this is true, all previous lines in the log will be cleared</param>
    private void Log(string line, bool server = true, bool clear = false)
    {
        //Do not write empty lines
        if (line == null || line.Length == 0)
            return;

        if (server)
        {
            if (clear)
                serverLogString = "";
            serverLogString += line + "<br/>"; //Always add a linebreak tag at the end
            serverLog = (MarkupString)serverLogString;
        }
        else
        {
            if (clear)
                workflowLogString = "";
            workflowLogString += line + "<br/>"; //Always add a linebreak tag at the end
            workflowLog = (MarkupString)workflowLogString;
        }
    }

    /// <summary>
    /// Updates the workflow log with the most recent information
    /// </summary>
    private async Task UpdateWorkflowLog()
    {
        try
        {
            var client = new HttpClient();

            //Request headers
            client.DefaultRequestHeaders.Add("User-Agent", "THirvolaBot");
            client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/vnd.github+json"));

            //GET
            HttpResponseMessage resp = await client.GetAsync("https://api.github.com/repos/THirvola/AzureCICDProject/actions/workflows/105888792/runs");
            string respString = await resp.Content.ReadAsStringAsync();

            //Parsing response
            Stream responseStream = resp.Content.ReadAsStream();
            JsonElement jsonRoot = JsonDocument.Parse(responseStream).RootElement;
            JsonElement latestRun = jsonRoot.GetProperty("workflow_runs")[0];
            Log("Latest workflow run:", false, true);
            Log("Number: " + latestRun.GetProperty("run_number").GetInt32(), false);
            previousStatus = latestRun.GetProperty("status").GetString()!;
            string? previousConclusion = latestRun.GetProperty("conclusion").GetString();
            if (previousConclusion == null)
                Log("Status: " + previousStatus, false);
            else
                Log("Status: " + previousStatus + ", " + previousConclusion, false);
            Log("Trigger commit: " + latestRun.GetProperty("display_title").GetString()!, false);
            DateTime previousWorkflow = DateTime.Parse(latestRun.GetProperty("updated_at").GetString()!, System.Globalization.CultureInfo.InvariantCulture).ToUniversalTime();
            if (previousWorkflow > previousGeneration)
                previousGeneration = DateTime.Parse(latestRun.GetProperty("updated_at").GetString()!, System.Globalization.CultureInfo.InvariantCulture).ToUniversalTime();
            Log("Updated: " + previousGeneration.ToString("yyyy-MM-dd HH:mm:ss UTC", System.Globalization.CultureInfo.InvariantCulture), false);
        } catch
        {
            Log("Could not fetch workflow run log. Possible rate limit exceeding. Try again later.", false, true);
        }
    }

    /// <summary>
    /// Changes the number in the local source code and pushes the changes to github.
    /// </summary>
    private async Task ChangeNumber()
    {
        _ = Task.Run(() => UpdateWorkflowLog());

        //checking if it's been 5 minutes yet
        if (DateTime.UtcNow - previousGeneration < new TimeSpan(0, 5, 0))
        {
            Log("The button is on cooldown until " + previousGeneration.AddMinutes(5).ToString("yyyy-MM-dd HH:mm:ss UTC", System.Globalization.CultureInfo.InvariantCulture), true, true);
            return;
        }

        //Checking if there is a workflow run happening right now
        if (previousStatus != "completed")
        {
            Log("The previous workflow run has not completed yet.", true, true);
            return;
        }

        Log("Starting the process", true, true);
        try
        {
            //Cloning source if it doesn't exist already
            if (!Directory.Exists("./SourceForGit"))
            {
                Log("Cloning the source from https://github.com/THirvola/AzureCICDProject.git");

                Directory.CreateDirectory("./SourceForGit");

                //Cloning the github repository to the source folder
                await Cli.Wrap("git").WithArguments("clone https://github.com/THirvola/AzureCICDProject.git").WithWorkingDirectory("./SourceForGit").WithValidation(CommandResultValidation.None).ExecuteAsync();
            }
            //Pulling latest source if we already have some version
            else
            {
                Log("Pulling latest code");

                await Cli.Wrap("git").WithArguments("pull origin master").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
            }

            if (File.Exists("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor"))
            {
                Log("Reading the current source for the page");
                string fileContents = File.ReadAllText("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor");
                if (fileContents != null && fileContents.Length > 0)
                {
                    //Change the number and date locally
                    int newNumber = System.Random.Shared.Next(1000);

                    Log("Changing the number in source to " + newNumber);

                    int currentNumberDefinition = fileContents.IndexOf("currentNumber = ");
                    int endOfLine = fileContents.IndexOf(";", currentNumberDefinition);

                    string fileStart = fileContents.Substring(0, currentNumberDefinition + 16);
                    string endOfFile = fileContents.Substring(endOfLine);
                    string newFileContents = fileStart + newNumber + endOfFile;

                    File.WriteAllText("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor", newFileContents);

                    Log("Making sure git is properly configured");

                    string token = Environment.GetEnvironmentVariable("GIT_TOKEN")!;
                    string username = Environment.GetEnvironmentVariable("GIT_USERNAME")!;
                    string email = Environment.GetEnvironmentVariable("GIT_EMAIL")!;

                    await Cli.Wrap("git").WithArguments("config user.email " + email).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
                    await Cli.Wrap("git").WithArguments("config user.name " + username).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
                    await Cli.Wrap("git").WithArguments("add --all").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
                    await Cli.Wrap("git").WithArguments(["commit", "-m", "Change number to " + newNumber]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
                    
                    await Cli.Wrap("git").WithArguments(["config", "--global", "credential.credentialStore", "dpapi"]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();
                    await Cli.Wrap("git").WithArguments(["remote", "set-url", "origin", "https://username:" + token + "@github.com/THirvola/AzureCICDProject.git"]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Pushing changes to Github");
                    CommandResult pushResult = await Cli.Wrap("git").WithArguments("push origin master").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    if (pushResult.IsSuccess)
                    {
                        Log("Successfully pushed to repository");
                         
                        //updating the local generation time
                        previousGeneration = DateTime.UtcNow;
                    }
                    else
                    {
                        Log("Failed to push into repository");
                    }
                }
                else
                {
                    Log("Error: Could not find page source");
                    Log("Attempting to remove repository folder");
                    Directory.Delete("./SourceForGit", true);
                }
            }
            else
            {
                Log("Error: Could not find the razor page");
            }
        } catch (Exception e)
        {
            Log("Error: " + e.Message);
        }
    }
}
