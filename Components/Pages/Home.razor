@using CliWrap;
@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>CI/CD demonstration</h1>

This is a simple app to demonstrate Continuous integration/deployment (CI/CD).
<br />

<br/>
Pressing the button below will have the following effect:
<br />
1. Randomize a new number between 1 and 1000
<br />
2. Change the value of the number in the source code itself
<br />
3. Commit changes to the page and push that to Github
<br />
4. Github will start an automatic build and deployment of the app
<br />
5. After a while, you can refresh the page and notice how everyone can see the number YOU generated
<br />

<br />
There is a 5-minute cooldown on the button.
<br />

<h2>Current number: @currentNumber</h2>
<i>Generated at @lastGenerated</i>
<br />
<br />

<button class="btn btn-primary" @onclick="ChangeNumber">Generate!</button>
<br />
<br />
<p>Log:<br/>@markupLog</p>

@code {
    private int currentNumber = 4;
    private string lastGenerated = "2024-07-07 08:32:19 UTC";
    private string logString = "";
    private MarkupString markupLog = (MarkupString)"";

    private void Log(string line, bool clear = false)
    {
        if (clear)
            logString = "";
        logString += line;
        markupLog = (MarkupString)logString;
    }

    private async Task ChangeNumber()
    {
        //checking if it's been 5 minutes yet
        DateTime previousGeneration = DateTime.Parse(lastGenerated.Substring(0, lastGenerated.Length-4), System.Globalization.CultureInfo.InvariantCulture);
        if (DateTime.UtcNow - previousGeneration < new TimeSpan(0, 5, 0))
        {
            Log("The button is on cooldown until " + previousGeneration.AddMinutes(5).ToString("yyyy-MM-dd HH:mm:ss UTC", System.Globalization.CultureInfo.InvariantCulture) + "<br />", true);
            return;
        }

        Log("Starting the process <br />", true);

        try
        {
            //Creating source if it doesn't exist already
            if (!Directory.Exists("./SourceForGit"))
            {
                Log("Creating new directory for cloning <br />");
                Directory.CreateDirectory("./SourceForGit");

                Log("Cloning the source from https://github.com/THirvola/AzureCICDProject.git <br />");

                //Cloning the github repository to the source folder
                CommandResult cloneResult = await Cli.Wrap("git").WithArguments("clone https://github.com/THirvola/AzureCICDProject.git").WithWorkingDirectory("./SourceForGit").WithValidation(CommandResultValidation.None).ExecuteAsync();

                Log("Cloning successful: " + cloneResult.IsSuccess + ", with exit code " + cloneResult.ExitCode + " <br />");
            }
            else
            {
                Log("Directory for repo exists <br />");

                CommandResult pullResult = await Cli.Wrap("git").WithArguments("pull origin master").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                Log("Pulled latest code with exit code: " + pullResult.ExitCode + " <br />");
            }

            if (File.Exists("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor"))
            {
                Log("Reading the current source for the page<br/>");
                string fileContents = File.ReadAllText("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor");
                if (fileContents != null && fileContents.Length > 0)
                {
                    Log("Generating a new number<br/>");

                    //Change the number and date locally
                    currentNumber = System.Random.Shared.Next(1000);
                    lastGenerated = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss UTC", System.Globalization.CultureInfo.InvariantCulture);

                    Log("Changing the number in source to " + currentNumber + "<br/>");

                    int currentNumberDefinition = fileContents.IndexOf("currentNumber = ");
                    int endOfLine = fileContents.IndexOf(";", currentNumberDefinition);
                    int lastGeneratedDefinition = fileContents.IndexOf("lastGenerated = ", endOfLine);
                    int lastGeneratedEndOfLine = fileContents.IndexOf(";", lastGeneratedDefinition);

                    string fileStart = fileContents.Substring(0, currentNumberDefinition + 16);
                    string numberToDate = fileContents.Substring(endOfLine, lastGeneratedDefinition - endOfLine + 16) + "\"";
                    string endOfFile = "\"" + fileContents.Substring(lastGeneratedEndOfLine);
                    string newFileContents = fileStart + currentNumber + numberToDate + lastGenerated + endOfFile;

                    File.WriteAllText("./SourceForGit/AzureCICDProject/Components/Pages/Home.razor", newFileContents);

                    Log("Setting up git config in the cloned directory<br/>");

                    CommandResult result = await Cli.Wrap("git").WithArguments("config user.name THirvola").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Configured user name with exit code " + result.ExitCode + "<br/>");

                    CommandResult result1 = await Cli.Wrap("git").WithArguments("config user.email thirvola@gmail.com").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Configured email with exit code " + result1.ExitCode + "<br/>"); 

                    CommandResult result2 = await Cli.Wrap("git").WithArguments("add --all").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Staged changes with exit code " + result2.ExitCode + "<br/>"); 

                    CommandResult result3 = await Cli.Wrap("git").WithArguments(["commit", "-m", "Change number to " + currentNumber]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Committed changes with exit code " + result3.ExitCode + "<br/>");

                    string token = Environment.GetEnvironmentVariable("GIT_TOKEN")!;
                    CommandResult result4 = await Cli.Wrap("git").WithArguments(["config", "--global", "credential.credentialStore", "dpapi"]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Set credential config with exit code " + result4.ExitCode + " <br/>");

                    CommandResult result5 = await Cli.Wrap("git").WithArguments(["remote", "set-url", "origin", "https://username:" + token + "@github.com/THirvola/AzureCICDProject.git"]).WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Set remote with exit code " + result4.ExitCode + " <br/>");

                    CommandResult result6 = await Cli.Wrap("git").WithArguments("push origin master").WithWorkingDirectory("./SourceForGit/AzureCICDProject").WithValidation(CommandResultValidation.None).ExecuteAsync();

                    Log("Pushed to github with exit code " + result6.ExitCode + "<br/>");

                    if (result6.IsSuccess)
                        Log("Successfully pushed to repository. Automatic building and deployment has started in GitHub.<br/>");
                }
                else
                {
                    Log("Error: Could not find page source<br/>");
                    Log("Attempting to remove repository folder<br/>");
                    Directory.Delete("./SourceForGit", true);
                }
            }
            else
            {
                Log("Error: Could not find the razor page.<br/>");
            }
        } catch (Exception e)
        {
            Log("Error: " + e.Message + "<br/>");
        }
    }
}
